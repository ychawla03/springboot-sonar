node{
    def WORKSPACE= "/var/lib/jenkins/workspace/SpringBootMVCEYGDS"
    def dockerImageTag = "SpringBootMVCEYGDS${env.BUILD_NUMBER}"

    try{
        notifyBuild('STARTED')
        stage('Clone Repo'){
            //for daily purposes
            //Get some code from a Github Repository
            git url: 'https://gitlab.com/ychawla031/springboot-projects.git',
            credentialsId: 'springdeploy-user',
            branch: 'main'
        }
        stage('Build docker'){
            dockerImage = docker.build("SpringBootMVCEYGDS:${env.BUILD_NUMBER}")
        }
        stage('Docker docker'){
            echo "Docker Image Tag Name: ${dockerImageTag}"
            sh "docker stop SpringBootMVCEYGDS || true && docker rm SpringBootMVCEYGDS || true"
            sh "docker run --name SpringBootMVCEYGDS -d -p 8081:8081 SpringBootMVCEYGDS:${env.BUILD_NUMBER}"
        }
    }catch(e){
        currentBuild.result = "FAILED"
        throw e
    }finally{
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED'){

  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def now = new Date()
  // message
  def subject = "${buildStatus}, Job: ${env.JOB_NAME} FRONTEND - Deployment Sequence: [${env.BUILD_NUMBER}] "
  def summary = "${subject} - Check On: (${env.BUILD_URL}) - Time: ${now}"
  def subject_email = "Spring boot Deployment"
  def details = """<p>${buildStatus} JOB </p>
    <p>Job: ${env.JOB_NAME} - Deployment Sequence: [${env.BUILD_NUMBER}] - Time: ${now}</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}</a>"</p>"""


  // Email notification
    emailext (
         to: "ychawla03@gmail.com",
         subject: subject_email,
         body: details,
         recipientProviders: [[$class: 'DevelopersRecipientProvider']]
       )
}